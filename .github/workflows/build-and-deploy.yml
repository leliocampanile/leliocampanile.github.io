name: Build & Deploy (Jekyll + jekyll-scholar)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - name: Install dependencies
        run: bundle install --jobs 4
      - name: Build site
        env:
          JEKYLL_ENV: production
        run: bundle exec jekyll build --trace

      - name: Generate keyword pages from .bib
        run: |
          mkdir -p _keywords
          # Cancella i file generati in precedenza (mantieni eventuali file manuali rinominandoli con .keep)
          find _keywords -maxdepth 1 -type f -name '*.md' -print -delete || true

          ruby - <<'RUBY'
          require 'bibtex'
          require 'fileutils'
      
          SRC_DIR = '_bibliography'
          BIBFILE = ENV.fetch('BIBFILE', 'papers.bib') # cambia se hai un nome diverso
          PATH    = File.join(SRC_DIR, BIBFILE)
      
          def slugify(str)
            s = str.downcase.strip
            s = s.gsub(/[^\p{Alnum}]+/u, '-') # caratteri non alfanumerici â†’ '-'
            s.gsub(/^-+|-+$/, '')             # trim '-'
          end
      
          abort("BibTeX file not found: #{PATH}") unless File.exist?(PATH)
      
          bib = BibTeX.open(PATH)
      
          # Raccogli sia 'keywords' sia 'author_keywords'; separatori ';' o ','
          counts = Hash.new(0)
          bib.each do |e|
            next unless e.respond_to?(:[])
            raw = [e[:keywords], e[:author_keywords]].compact.map(&:to_s).join(',')
            next if raw.strip.empty?
            raw.split(/[;,]/).each do |k|
              k = k.strip
              next if k.empty?
              counts[k] += 1
            end
          end
      
          FileUtils.mkdir_p('_keywords')
      
          counts.keys.sort.each do |kw|
            slug = slugify(kw)
            path = File.join('_keywords', "#{slug}.md")
            File.write(path, <<~MD)
            ---
            layout: keyword
            title: "Publications tagged with #{kw}"
            keyword: #{kw}
            ---
      
            <!-- Generated automatically from papers.bib -->
            MD
          end

          puts "Generated #{counts.size} keyword pages in _keywords/"
          RUBY
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site
      

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
